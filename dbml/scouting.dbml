Enum scouting_category {
  match
  pit
  drive_team
}

Enum data_type {
  "boolean"
  "number"
  "string"
  "string[]"
}

Table questions {
  id uuid [not null, default: `gen_random_uuid()`]
  category scouting_category [not null]
  season smallint [not null]
  index smallint
  parent_id uuid

  data_type data_type
  prompt text
  config jsonb

  indexes {
    id [pk]
    (season, category)
    (parent_id, index) [unique]
  }
}
Ref: questions.parent_id > questions.id [delete: cascade]
Ref: questions.season > frc_seasons.year [delete: restrict]

Table submissions {
  id uuid [not null, default: `gen_random_uuid()`]
  category scouting_category [not null]
  season smallint [not null]
  scouted_team smallint [not null]
  created_at timestamptz [not null, default: `now()`]
  scouting_user uuid [default: `auth.uid()`]
  scouting_team smallint // default: get_team_num()
  event_key citext [not null]
  match_key citext

  indexes {
    id [pk]
    (season, category)
    (event_key, scouted_team)
    (match_key, scouted_team)
    scouted_team
    scouting_user
    scouting_team
  }

  Note: 'A scouting data submission'
}
Ref: submissions.event_key > frc_events.key [delete: restrict]
Ref: submissions.match_key > frc_matches.key [delete: restrict]
Ref: submissions.season > frc_seasons.year [delete: restrict]
Ref: submissions.scouted_team > frc_teams.number [delete: restrict]
Ref: submissions.scouting_user > profiles.user_id [delete: set null]
Ref: submissions.scouting_team > teams.number [delete: set null]

Table submission_data {
  submission_id uuid [not null]
  question_id uuid [not null]
  data_type data_type [not null]
  data jsonb [not null]

  indexes {
    (submission_id, question_id) [pk]
    // conditional indexes based on data type:
    // (question_id, data::numeric) if number
    // (question_id, data::boolean) if boolean
    // (question_id, data::text) if string
    // (question_id, data) [gin, default] if string[]
  }

  Note: 'A submission\'s scouting data'
}
Ref: submission_data.submission_id > submissions.id [delete: cascade]
Ref: submission_data.question_id > questions.id [delete: restrict]
