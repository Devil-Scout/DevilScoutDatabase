Table assigned_matches {
  user_id uuid [not null]
  alliance frc_alliance_color [not null]
  station smallint [not null]
  match_key citext [not null]

  indexes {
    (user_id, match_key) [pk]
    match_key
  }
}
Ref: assigned_matches.user_id > users.id [delete: cascade]
Ref: assigned_matches.match_key > frc_matches.key [delete: cascade]

Table assigned_pits {
  user_id uuid [not null]
  team_num smallint [not null]
  event_key citext [not null]

  indexes {
    (user_id, event_key, team_num) [pk]
    (event_key, team_num)
  }
}
Ref: assigned_pits.user_id > users.id [delete: cascade]
Ref: assigned_pits.(event_key, team_num) > frc_event_teams.(event_key, team_num) [delete: cascade]

Enum scouting_category {
  match
  pit
  drive_team
}

Enum scouting_data_type {
  boolean
  number
  string
  array
}

Table questions {
  id uuid [not null, default: `gen_random_uuid()`]
  season smallint [not null]
  index smallint [not null, default: 0]
  category scouting_category [not null]
  parent_id uuid

  data_type scouting_data_type
  label text
  config jsonb

  indexes {
    id [pk]
    (season, category)
    (parent_id, index) [unique]
  }
}
Ref: questions.parent_id > questions.id [delete: cascade]
Ref: questions.season > frc_seasons.year [delete: restrict]

Table submissions {
  id uuid [not null, default: `gen_random_uuid()`]
  category scouting_category [not null]
  season smallint [not null]
  scouted_team smallint [not null]
  created_at timestamptz [not null, default: `now()`]
  scouting_user uuid [default: `auth.uid()`]
  scouting_team smallint // default: get_team_num()
  event_key citext
  match_key citext

  indexes {
    id [pk]
    // submissions by user:
    // (scouting_user, event_key, scouted_team) [unique] where event_key IS NOT NULL
    // (scouting_user, match_key) [unique] where match_key IS NOT NULL
    // (scouting_team, event_key, scouted_team) where event_key IS NOT NULL
    // (scouting_team, match_key) where scouting_team IS NOT NULL
    // (season, category, scouted_team, event_key) where event_key IS NOT NULL
    // (season, category, scouted_team, match_key) where match_key IS NOT NULL
  }
}
Ref: submissions.(event_key, scouted_team) > frc_event_teams.(event_key, team_num) [delete: restrict]
Ref: submissions.(match_key, scouted_team) > frc_match_teams.(match_key, team_num) [delete: restrict]
Ref: submissions.scouting_team > teams.number [delete: set null]
Ref: submissions.(scouting_team, scouting_user) > team_users.(team_num, user_id) // delete: set null (scouting_user)

Table submission_data {
  submission_id uuid [not null]
  question_id uuid [not null]
  data_num numeric
  data_bool boolean
  data_str text
  data_arr text[]

  indexes {
    (submission_id, question_id) [pk]
    // conditional indexes based on data type:
    // (submission_id, question_id, data_num)
    // (submission_id, question_id, data_bool)
    // (submission_id, question_id, data_str)
    // (submission_id, question_id, data_arr) [gin, default]
  }
}
Ref: submission_data.submission_id > submissions.id [delete: cascade]
Ref: submission_data.question_id > questions.id [delete: restrict]

Table scouting_comments {
  id uuid [not null, default: `gen_random_uuid()`]
  user_id uuid
  team_num smallint [not null]
  event_key citext [not null]
  content text [not null]

  indexes {
    id [pk]
    (event_key, team_num)
    (team_num, event_key)
    (user_id, event_key, team_num)
  }
}
Ref: scouting_comments.user_id > users.id [delete: set null]
Ref: scouting_comments.(team_num, event_key) > frc_event_teams.(team_num, event_key) [delete: restrict]

Table scouting_photos {
  id uuid [not null, default: `gen_random_uuid()`]
  user_id uuid
  team_num smallint [not null]
  event_key citext [not null]

  indexes {
    id [pk]
    (team_num, event_key)
    (event_key, team_num)
    (user_id, event_key, team_num)
  }
}
Ref: scouting_photos.user_id > users.id [delete: set null]
Ref: scouting_photos.(team_num, event_key) > frc_event_teams.(team_num, event_key) [delete: restrict]
