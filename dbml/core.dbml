// Represents a team utilizing the Devil Scout platform.
// Teams may not create themselves; they must request this of platform maintainers (1559).
// RLS Rules:
// - Allow anyone to SELECT
//   - For requesting to join teams
// - Allow the 'manage_team' role to UPDATE their team
//   - disallow editing number, created_at
Table teams {
  number smallint [not null]
  name text [not null]
  created_at timestamptz [not null, default: `now()`]

  indexes {
    number [pk] // patch: include name
  }
}

// Represents a single user of the platform. Users may create themselves.
// RLS rules:
// - Allow team members to SELECT own team
// - Allow users to INSERT or UPDATE themselves
//   - disallow editing id, created_at
Table users {
  id uuid [not null, default: `auth.uid()`]
  name text [not null]
  created_at timestamptz [not null, default: `now()`]

  indexes {
    id [pk] // patch: include name
  }
}

// Represents a user's association with a team.
// Users may not belong to more than one team (enforced by pk).
// RLS rules:
// - Allow users to DELETE their own entry
// - Allow the 'manage_users' role to INSERT or DELETE users from their team
// Hooks:
// - post-INSERT: DELETE relevant request from team_requests
Table team_users {
  user_id uuid [not null]
  team_num smallint [not null]
  added_by uuid [default: `auth.uid()`]
  joined_at timestamptz [not null, default: `now()`]

  indexes {
    user_id [pk] // patch: include team_num
    (team_num, user_id) [unique]
  }
}
Ref: team_users.user_id > users.id [delete: cascade]
Ref: team_users.team_num > teams.number [delete: cascade]
Ref: team_users.added_by > users.id [delete: set null]

// RLS rules:
// - Allow users to SELECT, INSERT, or DELETE their own requests
// - Allow the 'manage_team' role to SELECT or DELETE requests for their team
// Checks:
// - ensure user does not belong to a team
Table team_requests {
  user_id uuid [not null, default: `auth.uid()`]
  team_num smallint [not null]
  requested_at timestamptz [not null, default: `now()`]

  indexes {
    user_id [pk]
    (team_num, requested_at) // patch: include user_id
  }
}
Ref: team_requests.user_id > users.id [delete: cascade]
Ref: team_requests.team_num > teams.number [delete: cascade]

// RLS rules:
// - Allow users to SELECT their own disable entry
//   - to see who disabled them
// - Allow the 'manage_team' role to SELECT or DELETE disables for their team
// Checks:
// - ensure user has a team
// - ensure user's team matches disabler's team
Table disabled_users {
  user_id uuid [not null]
  disabled_by uuid [not null, default: `auth.uid()`]
  disabled_at timestamptz [not null, default: `now()`]

  indexes {
    user_id [pk]
    (disabled_by, disabled_at)
  }
}
Ref: disabled_users.user_id > users.id [delete: cascade]
Ref: disabled_users.disabled_by > users.id [delete: cascade]

// Users will be given one or more permissions, detailing their levels of access
// Types:
//   scout_match
//     Submit match scouting data
//   scout_pit
//     Submit pit scouting data
//   scout_drive_team
//     Submit drive team scouting data
//   review_submissions
//     Review submissions for validity
//       Flagged by auditing?
//   manage_team
//     Invite, disable, and delete team members
//     Edit team properties
// RLS rules:
// - Allow any user to SELECT anything
Table permission_types {
  id citext [not null]
  name text [not null]
  description text [not null]

  indexes {
    id [pk]
  }
}

// RLS rules:
// - Allow users to SELECT their own permissions
// - Allow users with 'manage_team' role to INSERT or DELETE their team's permissions
Table permissions {
  user_id uuid [not null]
  permission_type citext [not null]
  granted_by uuid [default: `auth.uid()`]
  granted_at timestamptz [default: `now()`]

  indexes {
    (user_id, permission_type) [pk]
    (granted_by, granted_at)
  }
}
Ref: permissions.user_id > users.id [delete: cascade]
Ref: permissions.permission_type > permission_types.id [delete: cascade]
Ref: permissions.granted_by > users.id [delete: set null]
